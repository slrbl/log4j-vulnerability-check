import subprocess
import argparse
import sys
import requests
import zipfile
import io
import os
import hashlib
import tempfile

def get_args():
    str_description="Check for the vulerable log4j JARs in your system"
    parser = argparse.ArgumentParser(formatter_class=argparse.RawDescriptionHelpFormatter, description=str_description)
    parser.add_argument('-l', '--local_hashes_file', help = 'A local file that contains the hashes', required = False)
    parser.add_argument('-o', '--online_hashes_file', help = 'An online resource that contains the hashes', required = False)
    parser.add_argument('-a', '--apache_log4j_archives', help = 'Collect the hashes from Apache Log4j Archives', required = False)
    return parser.parse_args()

def get_vulnerable_hashes_from_file(file_path):
    with open(file_path) as file:
        data = file.read()
    return data

def get_log4j_archive(version):
    url = 'https://archive.apache.org/dist/logging/log4j/{}/apache-log4j-{}-bin.zip'.format(version,version)
    response = requests.get(url)
    return io.BytesIO(response.content)

def download_target_jar(zip, directory, version):
    target_filename = 'log4j-core-{}.jar'.format(version) # What we are looking for
    list_files = zip.namelist()
    path_to_jar = [path for path in list_files if target_filename in path][0] # Get path of target .jar files
    zip.extract(path_to_jar,path=os.path.join(directory, path_to_jar))
    print('{} downloaded.'.format(path_to_jar))

def get_jar_hashes(directory):
    hashes = '# 2.* Verions\n\n'
    for subdir, dirs, files in os.walk(directory):
        for jar_file in files:
            path = os.path.join(subdir, jar_file)
            path_name = '.{}'.format(path.replace(directory, ''))
            hashes += '{}\t{}\n'.format(
                hashlib.md5(open(path, 'rb').read()).hexdigest(),
                path_name
            )
    return hashes

def get_apache_log4j_archives_hashes():
    with tempfile.TemporaryDirectory() as dirpath:
        # All 2.0-alpha1 until 2.17.0
        vulnerable_versions = ['2.0-alpha1','2.0-alpha2','2.0-beta1','2.0-beta2','2.0-beta3','2.0-beta4',
                                '2.0-beta5','2.0-beta6','2.0-beta7','2.0-beta8','2.0-beta9','2.0-rc1','2.0-rc2',
                                '2.0.1','2.0.2','2.0','2.1','2.10.0','2.11.0','2.11.1','2.11.2','2.12.0','2.12.1',
                                '2.12.2','2.13.0','2.13.1','2.13.2','2.13.3','2.14.0','2.14.1','2.15.0','2.16.0',
                                '2.2','2.3','2.4.1','2.4','2.5','2.6.1','2.6.2','2.6','2.7','2.8.1','2.8.2','2.8',
                                '2.9.0','2.9.1','2.17.0','2.12.3','2.3.1']
        for version in vulnerable_versions:
            archive = get_log4j_archive(version)
            with zipfile.ZipFile(archive, 'r') as zip:
                download_target_jar(zip, dirpath, version)
        hashes = get_jar_hashes(dirpath)
        return hashes

def find_and_hash():
    cmd = 'find / -name *log4j*jar -print 2>/dev/null -exec md5sum {} \;'
    result = subprocess.Popen(cmd,shell=True,stdout=subprocess.PIPE,stderr=subprocess.STDOUT).communicate()[0]
    return result.decode('UTF-8').splitlines()

if __name__ == '__main__':

    vulnerable_jars = []
    DEFAULT_HASHES = 'https://raw.githubusercontent.com/slrbl/CVE-2021-44228-Log4Shell-Hashes/main/md5sum.txt'

    args = get_args()

    try:
        if args.local_hashes_file != None:
            vulnerable_hashes = get_vulnerable_hashes_from_file(args.local_hashes_file)
        else:
            if args.online_hashes_file != None:
                vulnerable_hashes = requests.get(online_hashes_file).text
            else:
                if args.apache_log4j_archives != None:
                    vulnerable_hashes = get_apache_log4j_archives_hashes()
                else:
                    vulnerable_hashes = requests.get(DEFAULT_HASHES).text
    except:
        print('Something wet wrong getting the vulnerable hashes data')
        sys.exit(1)

    for file_hash in find_and_hash():
        file_hash = str(file_hash)
        elems = file_hash.split(' ')
        if len(elems) > 1:
            file_name = elems[2]
            hash_value = elems[0]
            print (file_name)
            print(hash_value)
            if hash_value in vulnerable_hashes:
                vulnerable_jars.append([hash_value,file_name])

if len(vulnerable_jars) > 0:
    print ('\nHere is the list of your vulnerable log4j:')
    for vuln in vulnerable_jars:
        print (vuln)
else:
    print('\nNo vulnerable log4j found.')
